{"version":3,"file":"yp-form.js","sourceRoot":"","sources":["../../../../src/@yrpri/common/yp-form.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/ban-ts-ignore */\n/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\n\n// Originally from https://github.com/cimmwolf/yp-form\n\nimport { YpBaseElement } from './yp-base-element.js';\nimport { html, css } from 'lit';\nimport { property, customElement } from 'lit/decorators.js';\nimport { dom } from '@polymer/polymer/lib/legacy/polymer.dom.js';\nimport { FlattenedNodesObserver } from '@polymer/polymer/lib/utils/flattened-nodes-observer.js';\n\n/**\n`<yp-form>` is a wrapper around the HTML `<form>` element, that can\nvalidate and submit both custom and native HTML elements. Note that this\nis a breaking change from yp-form 1.0, which was a type extension.\n\n\n@element yp-form\n@demo demo/index.html\n*/\n\n@customElement('yp-form')\nexport class YpForm extends YpBaseElement {\n  /**\n   * HTTP request headers to send. See PolymerElements/iron-ajax for\n   * more details. Only works when `allowRedirect` is false.\n   */\n  @property({ type: Object })\n  headers: Record<string, string> = {};\n\n  _form: HTMLFormElement | undefined;\n  _defaults: WeakMap<HTMLInputElement | HTMLFormElement, object> | undefined;\n\n  _nodeObserver: FlattenedNodesObserver | undefined;\n\n  static get style() {\n    return [\n      css`\n        :host {\n          display: block;\n        }\n      `,\n    ];\n  }\n\n  render() {\n    return html`\n      <!-- This form is used to collect the elements that should be submitted -->\n      <slot></slot>\n\n      <!-- This form is used for submission -->\n      <form id=\"helper\"></form>\n    `;\n  }\n\n  /**\n   * Fired if the form cannot be submitted because it's invalid.\n   *\n   * @event yp-form-invalid\n   */\n\n  /**\n   * Fired after the form is submitted.\n   *\n   * @event yp-form-submit\n   */\n\n  /**\n   * Fired before the form is submitted.\n   *\n   * @event yp-form-presubmit\n   */\n\n  /**\n   * Fired after the form is reset.\n   *\n   * @event yp-form-reset\n   */\n\n  /**\n   * Fired after the form is submitted and a response is received. An\n   * IronRequestElement is included as the event.detail object.\n   *\n   * @event yp-form-response\n   */\n\n  /**\n   * Fired after the form is submitted and an error is received. An\n   * error message is included in event.detail.error and an\n   * IronRequestElement is included in event.detail.request.\n   *\n   * @event yp-form-error\n   */\n\n  /**\n   * @return {void}\n   * @override\n   */\n  connectedCallback() {\n    super.connectedCallback();\n    this.addGlobalListener('yp-network-error', this._formError.bind(this));\n    // We might have been detached then re-attached.\n    // Avoid searching again for the <form> if we already found it.\n    if (this._form) {\n      return;\n    }\n    // Search for the `<form>`, if we don't find it, observe for\n    // mutations.\n    this._form = this.$$('form') as HTMLFormElement;\n    if (this._form) {\n      this._init();\n      // Since some elements might not be upgraded yet at this time,\n      // we won't be able to look into their shadowRoots for submittables.\n      // We wait a tick and check again for any missing submittable default\n      // values.\n      window.setTimeout(this._saveInitialValues.bind(this), 1);\n    } else {\n      //@ts-ignore\n      this._nodeObserver = dom(this).observeNodes(mutations => {\n        for (let i = 0; i < mutations.addedNodes.length; i++) {\n          if (mutations.addedNodes[i].tagName === 'FORM') {\n            this._form = mutations.addedNodes[i] as HTMLFormElement;\n            // At this point in time, all custom elements are expected\n            // to be upgraded, hence we'll be able to traverse their\n            // shadowRoots.\n            this._init();\n            //@ts-ignore\n            dom(this).unobserveNodes(this._nodeObserver!);\n            this._nodeObserver = undefined;\n          }\n        }\n      });\n    }\n  }\n\n  _formError(event: CustomEvent) {\n    if (event.detail.errorId && event.detail.errorId == 'formError') {\n      this.fire('yp-form-error', {});\n    }\n  }\n\n  /**\n   * @return {void}\n   * @override\n   */\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    this.removeGlobalListener('yp-network-error', this._formError.bind(this));\n    if (this._nodeObserver) {\n      //@ts-ignore\n      dom(this).unobserveNodes(this._nodeObserver);\n      this._nodeObserver = undefined;\n    }\n  }\n\n  _init() {\n    this._form!.addEventListener(\n      'submit',\n      (this.submit as any).bind(this),\n      false\n    );\n    this._form!.addEventListener(\n      'reset',\n      (this.reset as any).bind(this),\n      false\n    );\n\n    // Save the initial values.\n    this._defaults = this._defaults || new WeakMap();\n    this._saveInitialValues();\n  }\n\n  /**\n   * Saves the values of all form elements that will be used when resetting\n   * the form. Initially called asynchronously on attach. Any time you\n   * call this function, the previously saved values for a form element will\n   * be overwritten.\n   *\n   * This function is useful if you are dynamically adding elements to\n   * the form, or if your elements are asynchronously setting their values.\n   * @return {void}\n   */\n  saveResetValues() {\n    this._saveInitialValues(true);\n  }\n\n  /**\n   * @param {boolean=} overwriteValues\n   * @return {void}\n   */\n  _saveInitialValues(overwriteValues = false) {\n    const nodes = this._getValidatableElements();\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n      if (!this._defaults!.has(node) || overwriteValues) {\n        // Submittables are expected to have `value` property,\n        // that's what gets serialized.\n        const defaults = { value: node.value, checked: false, invalid: false };\n        if ('checked' in node) {\n          defaults.checked = node.checked;\n        }\n        this._defaults!.set(node, defaults);\n      }\n    }\n  }\n\n  /**\n   * Validates all the required elements (custom and native) in the form.\n   * @return {boolean} True if all the elements are valid.\n   */\n  validate() {\n    // If you've called this before distribution happened, bail out.\n    if (!this._form) {\n      return false;\n    }\n\n    if (this._form.getAttribute('novalidate') === '') return true;\n\n    // Start by making the form check the native elements it knows about.\n    let valid = this._form.checkValidity();\n    const elements = this._getValidatableElements();\n\n    // Go through all the elements, and validate the custom ones.\n    for (let el, i = 0; (el = elements[i]), i < elements.length; i++) {\n      // This is weird to appease the compiler. We assume the custom element\n      // has a validate() method, otherwise we can't check it.\n      const validatable = el as YpHTMLInputElement;\n      if (validatable.reportValidity) {\n        valid = !!validatable.reportValidity() && valid;\n      }\n    }\n    return valid;\n  }\n\n  /**\n   * Submits the form.\n   *\n   * @param {Event=} event\n   * @return {void}\n   */\n  submit(event: CustomEvent | undefined = undefined) {\n    // We are not using this form for submission, so always cancel its event.\n    if (event) {\n      event.preventDefault();\n    }\n\n    // If you've called this before distribution happened, bail out.\n    if (!this._form) {\n      return;\n    }\n\n    if (!this.validate()) {\n      this.fire('yp-form-invalid');\n      return;\n    }\n\n    // Remove any existing children in the submission form (from a previous\n    // submit).\n    this.$$('#helper')!.textContent = '';\n\n    const json = this.serializeForm();\n    this._makeAjaxRequest(json);\n  }\n\n  /**\n   * Resets the form to the default values.\n   *\n   * @param {Event=} event\n   * @return {void}\n   */\n  reset(event: CustomEvent) {\n    // We are not using this form for submission, so always cancel its event.\n    if (event) event.preventDefault();\n\n    // If you've called this before distribution happened, bail out.\n    if (!this._form) {\n      return;\n    }\n\n    // Ensure the native form fired the `reset` event.\n    // User might have bound `<button on-click=\"_resetIronForm\">`, or directly\n    // called `ironForm.reset()`. In these cases we want to first reset the\n    // native form.\n    if (!event || event.type !== 'reset' || event.target !== this._form) {\n      this._form.reset();\n      return;\n    }\n\n    // Load the initial values.\n    const nodes = this._getValidatableElements();\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i] as LooseObject;\n      if (this._defaults!.has(node as HTMLInputElement)) {\n        const defaults = this._defaults!.get(\n          node as HTMLInputElement\n        ) as Record<string, any>;\n        for (const propName in defaults) {\n          node[propName] = defaults[propName];\n        }\n      }\n    }\n\n    this.dispatchEvent(\n      new CustomEvent('yp-form-reset', { bubbles: true, composed: true })\n    );\n  }\n\n  /**\n   * Serializes the form as will be used in submission. Note that `serialize`\n   * is a Polymer reserved keyword, so calling `someIronForm`.serialize()`\n   * will give you unexpected results.\n   * @return {!Object<string, *>} An object containing name-value pairs for elements that\n   *                  would be submitted.\n   */\n  serializeForm() {\n    // Only elements that have a `name` and are not disabled are submittable.\n    const elements = this._getSubmittableElements();\n    const json = {};\n    for (let i = 0; i < elements.length; i++) {\n      const values = this._serializeElementValues(elements[i]);\n      for (let v = 0; v < values.length; v++) {\n        this._addSerializedElement(json, elements[i].name, values[v]);\n      }\n    }\n    return json;\n  }\n\n  async _makeAjaxRequest(json: Record<string, string>) {\n    const url = this._form!.getAttribute('action');\n    const method = this._form!.getAttribute('method') || 'GET';\n    const headers = this.headers;\n\n    this.fire('yp-form-submit');\n\n    const bodyParams = Object.keys(json)\n      .map(key => {\n        return encodeURIComponent(key) + '=' + encodeURIComponent(json[key]);\n      })\n      .join('&');\n\n    this.headers['content-type'] = 'application/x-www-form-urlencoded';\n\n    const formResults = (await window.serverApi.submitForm(\n      url!,\n      method,\n      headers,\n      bodyParams\n    )) as any | void;\n\n    if (formResults != null) {\n      this.fire('yp-form-response', formResults);\n    } else {\n      this.fire('yp-form-error', {});\n    }\n  }\n\n  _getValidatableElements() {\n    return this._findElements(\n      this._form!,\n      true /* ignoreName */,\n      false /* skipSlots */\n    );\n  }\n\n  _getSubmittableElements() {\n    return this._findElements(\n      this._form!,\n      false /* ignoreName */,\n      false /* skipSlots */\n    );\n  }\n\n  /**\n   * Traverse the parent element to find and add all submittable nodes to\n   * `submittable`.\n   * @param  {!Node} parent The parent node\n   * @param  {!boolean} ignoreName  Whether the name of the submittable nodes should be disregarded\n   * @param  {!boolean} skipSlots  Whether to skip traversing of slot elements\n   * @param  {!Array<!Node>=} submittable Reference to the array of submittables\n   * @return {!Array<!Node>}\n   * @private\n   */\n  _findElements(\n    parent: HTMLElement,\n    ignoreName: boolean,\n    skipSlots: boolean,\n    submittable: HTMLInputElement[] | undefined = undefined\n  ) {\n    submittable = submittable || [];\n    //@ts-ignore\n    const nodes = dom(parent).querySelectorAll('*');\n    for (let i = 0; i < nodes.length; i++) {\n      // An element is submittable if it is not disabled, and if it has a\n      // name attribute.\n      if (\n        !skipSlots &&\n        (nodes[i].localName === 'slot' || nodes[i].localName === 'content')\n      ) {\n        this._searchSubmittableInSlot(\n          submittable,\n          nodes[i] as HTMLInputElement,\n          ignoreName\n        );\n      } else {\n        this._searchSubmittable(\n          submittable,\n          nodes[i] as HTMLInputElement,\n          ignoreName\n        );\n      }\n    }\n    return submittable;\n  }\n\n  /**\n   * Traverse the distributed nodes of a slot or content element\n   * and add all submittable nodes to `submittable`.\n   * @param  {!Array<!Node>} submittable Reference to the array of submittables\n   * @param  {!Node} node The slot or content node\n   * @param  {!boolean} ignoreName  Whether the name of the submittable nodes should be disregarded\n   * @return {void}\n   * @private\n   */\n  _searchSubmittableInSlot(\n    submittable: HTMLInputElement[],\n    node: HTMLElement,\n    ignoreName: boolean\n  ) {\n    //@ts-ignore\n    const assignedNodes = dom(node).getDistributedNodes();\n\n    for (let i = 0; i < assignedNodes.length; i++) {\n      if (assignedNodes[i].nodeType === Node.TEXT_NODE) {\n        continue;\n      }\n\n      // Note: assignedNodes does not contain <slot> or <content> because\n      // getDistributedNodes flattens the tree.\n      this._searchSubmittable(\n        submittable,\n        assignedNodes[i] as HTMLInputElement,\n        ignoreName\n      );\n      //@ts-ignore\n      const nestedAssignedNodes = dom(assignedNodes[i]).querySelectorAll('*');\n      for (let j = 0; j < nestedAssignedNodes.length; j++) {\n        this._searchSubmittable(\n          submittable,\n          nestedAssignedNodes[j] as HTMLInputElement,\n          ignoreName\n        );\n      }\n    }\n  }\n\n  /**\n   * Traverse the distributed nodes of a slot or content element\n   * and add all submittable nodes to `submittable`.\n   * @param  {!Array<!Node>} submittable Reference to the array of submittables\n   * @param  {!Node} node The node to be\n   * @param  {!boolean} ignoreName  Whether the name of the submittable nodes should be disregarded\n   * @return {void}\n   * @private\n   */\n  _searchSubmittable(\n    submittable: HTMLInputElement[] | undefined,\n    node: HTMLInputElement,\n    ignoreName: boolean\n  ) {\n    if (this._isSubmittable(node, ignoreName)) {\n      submittable!.push(node);\n    } else if ((node as YpHTMLInputElement).root) {\n      this._findElements(\n        (node as YpHTMLInputElement).root,\n        ignoreName,\n        true /* skipSlots */,\n        submittable\n      );\n    }\n  }\n\n  /**\n   * An element is submittable if it is not disabled, and if it has a\n   * 'name' attribute. If we ignore the name, check if is validatable.\n   * This allows `_findElements` to decide if to explore an element's shadowRoot\n   * or not: an element implementing `validate()` is considered validatable, and\n   * we don't search for validatables in its shadowRoot.\n   * @param {!Node} node\n   * @param {!boolean} ignoreName\n   * @return {boolean}\n   * @private\n   */\n  _isSubmittable(node: HTMLInputElement, ignoreName: boolean) {\n    return (\n      !node.disabled &&\n      (ignoreName\n        ? node.name ||\n          typeof (node as YpHTMLInputElement).validate === 'function'\n        : node.name)\n    );\n  }\n\n  _serializeElementValues(element: HTMLInputElement) {\n    // We will assume that every custom element that needs to be serialized\n    // has a `value` property, and it contains the correct value.\n    // The only weird one is an element that implements\n    // IronCheckedElementBehaviour, in which case like the native checkbox/radio\n    // button, it's only used when checked. For native elements, from\n    // https://www.w3.org/TR/html5/forms.html#the-form-element. Native\n    // submittable elements: button, input, keygen, object, select, textarea;\n    // 1. We will skip `keygen and `object` for this iteration, and deal with\n    // them if they're actually required.\n    // 2. <button> and <textarea> have a `value` property, so they behave like\n    //    the custom elements.\n    // 3. <select> can have multiple options selected, in which case its\n    //    `value` is incorrect, and we must use the values of each of its\n    //    `selectedOptions`\n    // 4. <input> can have a whole bunch of behaviours, so it's handled\n    // separately.\n    // 5. Buttons are hard. The button that was clicked to submit the form\n    //    is the one who's name/value gets sent to the server.\n    const tag = element.tagName.toLowerCase();\n    if (\n      tag === 'button' ||\n      (tag === 'input' &&\n        (element.type === 'submit' || element.type === 'reset'))\n    ) {\n      return [];\n    }\n\n    if (tag === 'select' || tag === 'mwc-select') {\n      return this._serializeSelectValues(element as YpHTMLInputElement);\n    } else if (\n      tag === 'input' ||\n      tag === 'md-outlined-text-field' ||\n      tag === 'mwc-textfield' ||\n      tag === 'yp-structured-question-edit' ||\n      tag === 'yp-language-selector' ||\n      tag === 'yp-theme-selector'\n    ) {\n      return this._serializeInputValues(element);\n    } else {\n      if (!element.checked) return [];\n      return [element.value];\n    }\n  }\n\n  _serializeSelectValues(element: YpHTMLInputElement) {\n    const values = [];\n\n    // A <select multiple> has an array of options, some of which can be\n    // selected.\n    for (let i = 0; i < element.options.length; i++) {\n      if (element.options[i].selected) {\n        values.push(element.options[i].value);\n      }\n    }\n    return values;\n  }\n\n  _serializeInputValues(element: HTMLInputElement) {\n    // Most of the inputs use their 'value' attribute, with the exception\n    // of radio buttons, checkboxes and file.\n    const type = element.tagName.toLowerCase();\n\n    // Don't do anything for unchecked checkboxes/radio buttons.\n    // Don't do anything for file, since that requires a different request.\n    if (\n      ((type === 'mwc-checkbox' || type === 'md-radio') && !element.checked) ||\n      type === 'file'\n    ) {\n      return [];\n    }\n\n    // Don't do anything for yp-structured-answer-checkboxes for false\n    if ((element.value as unknown as boolean)===false) {\n      return [];\n    } else {\n      return [element.value];\n    }\n  }\n\n  _createHiddenElement(name: string, value: string) {\n    const input = document.createElement('input');\n    input.setAttribute('type', 'hidden');\n    input.setAttribute('name', name);\n    input.setAttribute('value', value);\n    return input;\n  }\n\n  _addSerializedElement(\n    json: Record<\n      string,\n      Array<string> | string | string[] | Array<Array<string>>\n    >,\n    name: string,\n    value: string\n  ) {\n    // If the name doesn't exist, add it. Otherwise, serialize it to\n    // an array,\n    if (json[name] === undefined) {\n      json[name] = value;\n    } else {\n      if (!Array.isArray(json[name])) {\n        const ar = [];\n        ar.push(json[name]);\n        json[name] = ar as Array<string>;\n      }\n      (json[name] as Array<string>).push(value);\n    }\n  }\n}\n"]}