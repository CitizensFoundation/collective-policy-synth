import { nothing } from 'lit';
import { YpBaseElement } from '../../@yrpri/common/yp-base-element';
import '@material/web/icon/icon.js';
import '@material/web/checkbox/checkbox.js';
import '@material/web/button/outlined-button.js';
import '@material/web/button/filled-button.js';
import '@material/web/textfield/filled-text-field.js';
import '@material/web/progress/circular-progress.js';
import '../../@yrpri/common/yp-image.js';
import { LtpServerApi } from '../LtpServerApi';
export declare class LtpAiChatElement extends YpBaseElement {
    message: string;
    sender: 'you' | 'bot';
    detectedLanguage: string;
    parentNodeId: string;
    crtId: string | number;
    clusterId: number;
    type: 'start' | 'error' | 'moderation_error' | 'info' | 'message' | 'thinking' | 'noStreaming' | undefined;
    active: boolean;
    fullReferencesOpen: boolean;
    followUpQuestionsRaw: string;
    followUpQuestions: string[];
    refinedCausesSuggestions: string[] | undefined;
    jsonLoading: boolean;
    lastChainCompletedAsValid: boolean;
    lastValidateCauses: string[] | undefined;
    isCreatingCauses: boolean;
    api: LtpServerApi;
    constructor();
    connectedCallback(): void;
    disconnectedCallback(): void;
    stopJsonLoading(): void;
    handleJsonLoadingStart: () => void;
    handleJsonLoadingEnd: (event: any) => void;
    static get styles(): any[];
    addSelected(): Promise<void>;
    get isError(): boolean;
    renderCGImage(): import("lit-html").TemplateResult<1>;
    renderRoboImage(): import("lit-html").TemplateResult<1>;
    renderRefinedSuggestions(): typeof nothing | import("lit-html").TemplateResult<1>;
    renderChatGPT(): any;
    parseFollowUpQuestions(): void;
    updated(changedProperties: Map<string | number | symbol, unknown>): void;
    renderUser(): import("lit-html").TemplateResult<1>;
    renderNoStreaming(): import("lit-html").TemplateResult<1>;
    renderThinking(): import("lit-html").TemplateResult<1>;
    getThinkingText(): "MÃµeldes..." | "Hugsa..." | "Thinking...";
    renderMessage(): any;
    render(): import("lit-html").TemplateResult<1>;
}
//# sourceMappingURL=ltp-ai-chat-element.d.ts.map