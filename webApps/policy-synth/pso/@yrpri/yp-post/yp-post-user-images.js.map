{"version":3,"file":"yp-post-user-images.js","sourceRoot":"","sources":["../../../src/@yrpri/yp-post/yp-post-user-images.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,MAAM,KAAK,CAAC;AACzC,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,MAAM,mBAAmB,CAAC;AAE5D,OAAO,EAAE,aAAa,EAAE,MAAM,8BAA8B,CAAC;AAE7D,OAAO,yCAAyC,CAAC;AACjD,OAAO,8BAA8B,CAAC;AAGtC,qEAAqE;AAG9D,IAAM,gBAAgB,GAAtB,MAAM,gBAAiB,SAAQ,aAAa;IAOjD,OAAO,CAAC,iBAAyD;QAC/D,KAAK,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC;QAEjC,IAAI,iBAAiB,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE;YACjC,IAAI,CAAC,YAAY,EAAE,CAAC;SACrB;IACH,CAAC;IAED,MAAM,KAAK,MAAM;QACf,OAAO;YACL,KAAK,CAAC,MAAM;YACZ,GAAG,CAAA;;;;;;;;;;;;;OAaF;SACF,CAAC;IACJ,CAAC;IAED,MAAM;QACJ,OAAO,IAAI,CAAA;;UAEL,IAAI,CAAC,IAAI;YACT,CAAC,CAAC,IAAI,CAAA;;;0BAGU,IAAI,CAAC,SAAS;0BACd,IAAI,CAAC,CAAC,CAAC,oBAAoB,CAAC;;gBAEtC,IAAI,CAAC,MAAM;gBACX,CAAC,CAAC,IAAI,CAAA;sBACA,IAAI,CAAC,MAAM,CAAC,GAAG,CACf,KAAK,CAAC,EAAE,CAAC,IAAI,CAAA;;mCAEA,IAAI,CAAC,IAAI;oCACR,KAAK;sCACH,IAAI,CAAC,QAAQ;uBAC5B,CACF;mBACF;gBACH,CAAC,CAAC,OAAQ;aACb;YACH,CAAC,CAAC,OAAQ;;KAEf,CAAC;IACJ,CAAC;IAED,KAAK,CAAC,QAAQ;QACZ,IAAI,IAAI,CAAC,IAAI,EAAE;YACb,IAAI,CAAC,MAAM,GAAG,MAAM,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YAC7D,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;gBACzC,IAAI,CAAC,IAAI,CAAC,qBAAqB,EAAE,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;aACtD;iBAAM;gBACL,IAAI,CAAC,IAAI,CAAC,qBAAqB,EAAE,CAAC,CAAC,CAAC;aACrC;SACF;IACH,CAAC;IAED,YAAY;QACV,IAAI,CAAC,QAAQ,EAAE,CAAC;IAClB,CAAC;IAED,SAAS;QACP,MAAM,CAAC,UAAU,CAAC,QAAQ,CAAC,MAAM,EAAE,cAAc,CAAC,CAAC;QACnD;;;aAGK;IACP,CAAC;CACF,CAAA;AApFC;IAAC,QAAQ,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC;8BAClB,KAAK;gDAA0B;AAEvC;IAAC,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;;8CACE;AALlB,gBAAgB;IAD5B,aAAa,CAAC,qBAAqB,CAAC;GACxB,gBAAgB,CAqF5B;SArFY,gBAAgB","sourcesContent":["import { html, css, nothing } from 'lit';\nimport { customElement, property } from 'lit/decorators.js';\n\nimport { YpBaseElement } from '../common/yp-base-element.js';\n\nimport '@material/web/button/outlined-button.js';\nimport './yp-post-user-image-card.js';\n\n\n//import { YpPostUserImageEdit } from './yp-post-user-image-edit.js';\n\n@customElement('yp-post-user-images')\nexport class YpPostUserImages extends YpBaseElement {\n  @property({ type: Array })\n  images: Array<YpImageData> | undefined;\n\n  @property({ type: Object })\n  post: YpPostData | undefined;\n\n  updated(changedProperties: Map<string | number | symbol, unknown>) {\n    super.updated(changedProperties);\n\n    if (changedProperties.has('post')) {\n      this._postChanged();\n    }\n  }\n\n  static get styles() {\n    return [\n      super.styles,\n      css`\n        md-outlined-button {\n          margin-top: 32px;\n          margin-bottom: 8px;\n          background-color: var(--accent-color);\n          color: #fff;\n          width: 242px;\n        }\n\n        yp-post-user-image-card {\n          margin-top: 32px;\n          margin-bottom: 32px;\n        }\n      `,\n    ];\n  }\n\n  render() {\n    return html`\n      <div class=\"layout vertical center-center\">\n        ${this.post\n          ? html`\n              <md-outlined-button\n                raised\n                @click=\"${this._newImage}\"\n                .label=\"${this.t('posts.newUserImage')}\"></md-outlined-button>\n\n              ${this.images\n                ? html`\n                    ${this.images.map(\n                      image => html`\n                        <yp-post-user-image-card\n                          .post=\"${this.post}\"\n                          .image=\"${image}\"\n                          @refresh=\"${this._refresh}\"></yp-post-user-image-card>\n                      `\n                    )}\n                  `\n                : nothing }\n            `\n          : nothing }\n      </div>\n    `;\n  }\n\n  async _refresh() {\n    if (this.post) {\n      this.images = await window.serverApi.getImages(this.post.id);\n      if (this.images && this.images.length > 0) {\n        this.fire('yp-post-image-count', this.images.length);\n      } else {\n        this.fire('yp-post-image-count', 0);\n      }\n    }\n  }\n\n  _postChanged() {\n    this._refresh();\n  }\n\n  _newImage() {\n    window.appGlobals.activity('open', 'newUserImage');\n    /*window.appDialogs.getDialogAsync('userImageEdit', (dialog: YpPostUserImageEdit) => {\n      dialog.setup(this.post!, undefined, true, this._refresh.bind(this));\n      dialog.open(true, { postId: this.post!.id, userImages: true });\n    });*/\n  }\n}\n"]}