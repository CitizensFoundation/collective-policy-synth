import { PolicySynthAgent } from "@policysynth/agents/base/agent.js";
import { PsAgent } from "@policysynth/agents/dbModels/agent.js";
interface ImportedJobDescriptionData {
    jobDescriptions: JobDescription[];
}
/**
 * Agent to read the Google Sheet that was generated by GoogleSheetsJobDescriptionAgent.
 * We assume the sheet has the same 2-row headers, followed by data rows.
 */
export declare class GoogleSheetsJobDescriptionImportAgent extends PolicySynthAgent {
    private sheetsConnector;
    private sheetName;
    private startRow;
    private startCol;
    private maxRows;
    private maxCols;
    skipAiModels: boolean;
    constructor(agent: PsAgent, memory: any, startProgress: number, endProgress: number, sheetName?: string);
    /**
     * Main entry point: Reads from the sheet, reconstructs jobDescriptions, returns them.
     */
    importJobDescriptions(): Promise<ImportedJobDescriptionData>;
    /**
     * Rebuild the jobDescriptions array based on the same headers used in the export.
     */
    private reconstructJobDescriptionsFromSheet;
    /**
     * Build a single JobDescription from a single row and the corresponding headers.
     */
    private buildJobDescriptionObject;
    /**
     * Parse a single OccupationalCategory object from main + sub columns.
     * If your sheet might have multiple categories, pick the first or combine them
     * into a single object.
     */
    private parseOccupationalCategory;
    /**
     * Convert a joined educationRequirements string into an array of JobEducationRequirement.
     */
    private parseEducationRequirements;
    private parseBooleanIfPossible;
    private parseJsonIfPossible;
    private parseStringList;
    /**
     * Convert zero-based column index to spreadsheet letter (e.g. 0->A, 25->Z, 26->AA)
     */
    private columnIndexToLetter;
}
export {};
//# sourceMappingURL=sheetsImport.d.ts.map